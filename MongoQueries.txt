1. Find the third highest salary from the EmployeeInfo table.
ans. 
db.EmployeeInfo.aggregate([
  { $sort: { salary: -1 } },
  { $skip: 2 },
  { $limit: 1 }
]);

2. Find the nth highest salary without using TOP/LIMIT keyword? 

ans. const N = 3;

db.employees.aggregate([
  {
    $group: {
      _id: "$salary"
    }
  },
  {
    $sort: {
      _id: -1  // Sort salaries in descending order
    }
  },
  {
    $skip: N - 1  // Skip N-1 salaries
  },
  {
    $limit: 1
  }
])

3. Find duplicate rows in a table. 
ans. 
db.users.aggregate([
  {
    $group: {
      _id: { name: "$name", email: "$email" },
      count: { $sum: 1 }
    }
  },
  {
    $match: {
      count: { $gt: 1 }
    }
  }
])

4. Calculate the even and odd records from a table. 
ans. 
db.numbers.aggregate([
  {
    $project: {
      parity: {
        $cond: [{ $eq: [{ $mod: ["$num", 2] }, 0] }, "even", "odd"]
      }
    }
  },
  {
    $group: {
      _id: "$parity",
      count: { $sum: 1 }
    }
  }
])

5. Display first and last record from EmployeeInfo table.
ans. 
1st record - db.EmployeeInfo.find().sort({ _id: 1 }).limit(1);
2nd record - db.EmployeeInfo.find().sort({ _id: -1 }).limit(1);

6. How do you copy all rows of a table.
ans. db.sourceCollection.aggregate([
  { $match: {} },        // Match all documents
  { $out: "targetCollection" }  // Overwrites or creates the target collection
]);

7. Retrieve the list of employees working in the same department. 
ans. 
db.EmployeeInfo.aggregate([
  {
    $group: {
      _id: "$department",
      employees: { $push: "$name" }
    }
  },
  {
    $project: {
      _id: 0,
      department: "$_id",
      employees: 1
    }
  }
])

8. Retrieve the last 3 records from EmployeeInfo table.
ans. 
db.EmployeeInfo.find().sort({ _id: -1 }).limit(3);

9. Find details of Employees whose EmpName ends with an alphabet 'A' and contains five alphabets. 
ans. 
db.EmployeeInfo.find({
  EmpName: { $regex: /^[A-Za-z]{4}A$/, $options: 'i' }
});

10. Query to delete duplicate record from Employee table.
ans. 
db.Employee.aggregate([
  {
    $group: {
      _id: { EmpName: "$EmpName", email: "$email" },
      ids: { $addToSet: "$_id" },
      count: { $sum: 1 }
    }
  },
  {
    $match: {
      count: { $gt: 1 }
    }
  }
]).forEach(doc => {
  doc.ids.shift(); // keep one document
  db.Employee.deleteMany({ _id: { $in: doc.ids } });
});

11. Query to retrive first four characters of Employee name from Employee table.
ans. 
db.Employee.aggregate([
  {
    $project: {
      _id: 0,
      EmpName: 1,
      FirstFourChars: { $substrBytes: ["$EmpName", 0, 4] }
    }
  }
])

12. Query to find the num of employees whose dob is between 01/06/1995 to 30/06/1998 and are grouped acc to gender?
ans. 
db.Employee.aggregate([
  {
    $match: {
      dob: {
        $gte: ISODate("1995-06-01T00:00:00.000Z"),
        $lte: ISODate("1998-06-30T23:59:59.999Z")
      }
    }
  },
  {
    $group: {
      _id: "$gender",
      count: { $sum: 1 }
    }
  }
])

13. Query to fetch all the records from Employeeinfo table ordered by department in ascending order and salary in descending order.
ans. 
db.Employeeinfo.find().sort({ department: 1, salary: -1 });

14. Query to fetch details of all employees excluding employees who are HR and ADMIN. 
ans. db.Employeeinfo.find({
  department: { $nin: ["HR", "ADMIN"] }
});

15. Query to fetch 50% records from EmployeeInfo table. 
ans. 
const totalCount = db.EmployeeInfo.countDocuments();
const limit = Math.floor(totalCount / 2);

db.EmployeeInfo.find().sort({ _id: 1 }).limit(limit);

16. Query to display the total salary of each Employee after adding 10% increment in the salary. 
ans. 
db.EmployeeInfo.aggregate([
  {
    $project: {
      _id: 0,
      EmpName: 1,
      OriginalSalary: "$salary",
      IncrementedSalary: { $multiply: ["$salary", 1.10] }
    }
  }
])

17. Query to retrieve two minimum and maximum salaries. 
ans. To combine both the queries you can use $facet.
db.EmployeeInfo.aggregate([
  { $sort: { salary: 1 } },    // Sort ascending (lowest first)
  { $limit: 2 }                // Take first two
])

db.EmployeeInfo.aggregate([
  { $sort: { salary: -1 } },   // Sort descending (highest first)
  { $limit: 2 }                // Take first two
])

18. Query to fetch the employee name and replace the space with '_'.
ans. 
db.EmployeeInfo.aggregate([
  {
    $project: {
      _id: 0,
      originalName: "$EmpName",
      formattedName: {
        $replaceAll: {
          input: "$EmpName",
          find: " ",
          replacement: "_"
        }
      }
    }
  }
])
